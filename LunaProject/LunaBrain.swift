//  LunaProject

// LunaBrain.swift
// Cerveau simple de Luna avec apprentissage local

import Foundation

class LunaBrain {
    
    // RÃ©fÃ©rence au gestionnaire de mÃ©moire partagÃ©
    private let memory = MemoryManager.shared
    
    // Fonction principale qui reÃ§oit un message et renvoie une rÃ©ponse
    func receive(message: String) -> String {
        let lowercasedMessage = message.lowercased()
        
        // ðŸ§  Luna retient tout ce que tu lui dis
        memory.remember("Utilisateur : \(message)")
        
        // ðŸ§  Luna tente de trouver une rÃ©ponse dÃ©jÃ  associÃ©e Ã  ce mot-clÃ©
        let keywords = extractKeywords(from: lowercasedMessage)
        for keyword in keywords {
            if let learnedResponse = memory.retrieve(for: keyword) {
                return learnedResponse
            }
        }
        
        // ðŸ¤– Si aucune rÃ©ponse nâ€™est trouvÃ©e, Luna improvise une rÃ©ponse simple
        let fallbackResponse = defaultResponse(to: message)
        
        // ðŸ§  Elle apprend cette rÃ©ponse pour la prochaine fois
        if let keyword = keywords.first {
            memory.associate(keyword: keyword, response: fallbackResponse)
        }
        
        // ðŸ§  Elle se souvient de sa propre rÃ©ponse
        memory.remember("Luna : \(fallbackResponse)")
        
        return fallbackResponse
    }

    // ðŸ’¬ RÃ©ponse par dÃ©faut si elle ne connaÃ®t pas le sujet
    private func defaultResponse(to message: String) -> String {
        return "Tâ€™as dit Â« \(message) Â» tantÃ´tâ€¦ tu veux continuer lÃ -dessus ?"
    }

    // ðŸ”Ž Extraction trÃ¨s simple des mots-clÃ©s (on pourra amÃ©liorer plus tard)
    private func extractKeywords(from text: String) -> [String] {
        let words = text.components(separatedBy: .whitespacesAndNewlines)
        return words.filter { $0.count > 3 } // Ignore les mots trop courts
    }
}
